import asyncio
from datetime import datetime
import os
from os.path import join, dirname, abspath

import pandas as pd

from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from dotenv import load_dotenv

from utils.gs_module import get_table_scope

abspath = os.path.dirname(os.path.abspath(__file__))
dotenv_path = join(abspath, '.env')
# print('–†–∞–∑–º–µ—Å—Ç–∏ .env —Ç—É—Ç', dirname(dirname(__file__)))
load_dotenv(dotenv_path)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
TOKEN = os.environ.get("TELEGRAM_TOKEN")
SAMPLE_SPREADSHEET_ID = os.environ.get("SAMPLE_SPREADSHEET_ID")
SAMPLE_RANGE_NAME = os.environ.get("SAMPLE_RANGE_NAME")

bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

current_index = -1

next_button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='next')]])

@dp.message(Command("start"))
async def start_bot(message: Message):
    global df
    df = await get_table_scope()

    global current_index
    current_index = -1
    welcome_message = """
–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç.
–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å –ø—Ä–∏–µ–º–æ–º –ª–µ–∫–∞—Ä—Å—Ç–≤."""

    # –°–æ–∑–¥–∞–µ–º Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    #next_button = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='next')
    #inline_keyboard = types.InlineKeyboardMarkup.add(next_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(message.chat.id, welcome_message, reply_markup=next_button, disable_notification=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
#@dp.callback_query(func=lambda call: call.data == 'next')
@dp.callback_query()
async def next_data(call: types.CallbackQuery):
    if call.data == 'next':
        chat_id = call.message.chat.id
        global current_index
        current_index += 1

        global df
        try:
            len_df = len(df)
        except:

            df = await get_table_scope()
            len_df = len(df)

        if current_index < len_df:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            #send_next_data(chat_id)
            #bot.send_message(chat_id, current_index)

            # next_button = types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data='next')
            # inline_keyboard = types.InlineKeyboardMarkup()
            # inline_keyboard.add(next_button)

            df['from'] = pd.to_datetime(df['from'], dayfirst=True)
            df['to'] = pd.to_datetime(df['to'], dayfirst=True)
            date = df.loc[current_index, 'date']
            when = df.loc[current_index, 'when']
            name = df.loc[current_index, 'name']
            from_ = df.loc[current_index, 'from']
            to = df.loc[current_index, 'to']

            date_now = datetime.now()  # .strftime('%Y-%m-%d')
            delta = to.date() - date_now.date()
            delta = delta.days
            print(delta)

            txt = f"""{date} {when}
üíä{name}
–ü—Ä–∏–µ–º:
 –° {from_.strftime('%Y-%m-%d')}
–ü–û {to.strftime('%Y-%m-%d')}
–û—Å—Ç–∞–ª–æ—Å—å: {delta} –¥.
"""

            if pd.to_datetime(from_) <= date_now < pd.to_datetime(to):
                print(txt)
                await bot.send_message(call.message.chat.id,
                                 txt,
                                 reply_markup=next_button, disable_notification=True)
            else:
                txt = f'–õ–µ–∫–∞—Ä—Å—Ç–≤–æ {name} –ø–æ–∫–∞/—É–∂–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å'
                print(txt)
                await next_data(call)

        else:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö
            await bot.send_message(chat_id, '–ö–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö')
            await start_bot(call.message)


# if __name__ == "__main__":
#     executor.start_polling(dp, skip_updates=True)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    print('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞')
    asyncio.run(main())


